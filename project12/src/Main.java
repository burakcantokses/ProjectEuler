/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
import java.util.ArrayList;
import java.util.List;

/**
 * @author burakcantokses
 */
public class Main {

    public static void main(String[] args) {
        int number;
        int tempNumber = 1;
        int finding = 4;
        int i = 1;
        while(getFactorSize(tempNumber)<finding) {
            if (i==1) {
                tempNumber = i;
            }else {
                tempNumber = findTriangleNumbers(i);
            }
            if (getFactorSize(tempNumber)>=finding)  {
                number = tempNumber;
                System.out.println("Found: " + number);
                break;
            }
            i++;
        }
    }

    public static int findTriangleNumbers(int number) {
        int total = 0;
        for (int i = 1; i <= number; i++) {
            total += i;
        }
        return total;
    }

    public static int[]findFactor(int number) {
        List<Integer> list = new ArrayList<>();
        for (int i = number; i > 0 ; i--) {
            if (number%i == 0) {
                list.add(i);
            }
        }
        int[] factors = new int[list.size()];
        for (int i = 0; i < factors.length; i++) {
            factors[i] = list.get(i);
        }
        return factors;
    }

    public static int getFactorSize(int number) {
        int[] factor = findFactor(number);
        return factor.length;
    }
}
